{"version":3,"sources":["components/SortingApp/SortingApp.module.scss","components/Canvas/Canvas.module.scss","components/Sorter/Sorter.module.scss","components/Sorter/SorterAlgorithms.ts","components/AlgorithmSelection/AlgorithmSelection.tsx","components/LabeledSelect/LabeledSelect.tsx","components/DataPresetSelection/DataPresetSelection.tsx","components/SleepTimeSelection/SleepTimeSelection.tsx","components/Canvas/Canvas.tsx","hooks/useResizeObserver.ts","components/Sorter/SorterArray.ts","components/Sorter/SorterLogic.ts","components/Sorter/Sorter.tsx","components/ValueCountSelection/ValueCountSelection.tsx","components/WindowNumberSelect/WindowNumberSelect.tsx","components/SortingApp/SortingApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","BubbleSort","CocktailShakerSort","SelectionSort","InsertionSort","QuickSort","HeapSort","ShellSort","CombSort","array","indicesSorted","length","i","j","sorted","gt","swap","add","k","undefined","lower","upper","swapped","best","qs","lo","hi","mid","Math","floor","lt","shiftDown","heapify","start","end","root","child","gaps","gap","shrink","isSorted","algorithms","algorithmNames","Object","keys","algorithmNameList","AlgorithmSelection","algorithm","onChange","disabled","className","value","event","target","includes","map","name","idGenerator","LabeledSelect","text","children","useState","next","id","Container","Row","Col","xs","lg","htmlFor","shuffleFisherYates","ri","random","sortedData","count","result","dataGenerators","shuffled","reverseSorted","reverse","fewUnique","uniques","push","DataPresetSelection","preset","onPresetChange","onDataChange","useEffect","SleepTimeSelection","sleepTime","options","parseFloat","isNaN","Canvas","draw","setup","redraw","canvasRef","useRef","frameTime","frameCount","lastFrameTime","canvasDimensions","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","context","getContext","canvas","width","height","animationFrameId","t0","performance","now","render","t1","window","requestAnimationFrame","cancelAnimationFrame","styles","cloneArray","SorterArray","compareFn","_accesses","_comparisons","this","RangeError","validateIndex","v","get","compare","temp","set","SorterLogic","data","delay","onFinished","trueDelay","minDelay","generator","values","indidcesSorted","Set","lastCompared","step","tStart","realTime","timeout","running","updated","finished","setDelay","loop","bind","done","hasNext","runNext","pause","setInterval","clearInterval","comparisons","accesses","getValues","getIndicesSorted","getLastCompared","getComparisons","getAccesses","max","callback","Sorter","props","maxValues","logic","state","prevProps","prevState","reset","setState","isRunning","isFinished","onMaxValuesChange","didUpdate","ctx","avgFrameTime","border","defaultColor","sortedColor","comparedColor","borderWidth","ceil","innerWidth","innerHeight","setMaxValues","clearRect","getLastState","elementWidth","offset","fillStyle","fillRect","color","has","lineWidth","strokeStyle","strokeRect","fontSize","textX","textY","font","fillText","getRealTime","toFixed","getSleepTime","sorter","Component","ValueCountSelection","valueCount","maxValue","useMemo","parseInt","WindowNumberSelect","number","defaultProps","SortingApp","setPreset","setData","setValueCount","setSleepTime","numWindows","setNumWindows","setAlgorithms","setAlgorithm","useCallback","previous","sorterRef","createRef","windows","sorterContainer","style","algorithmSelection","appContainer","Navbar","collapseOnSelect","expand","fluid","Toggle","Brand","Collapse","Nav","Item","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74e07913.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"SortingApp_appContainer__1KHYU\",\"sorterContainer\":\"SortingApp_sorterContainer__37Mem\",\"algorithmSelection\":\"SortingApp_algorithmSelection__1TZAQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__3fvzk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sorter\":\"Sorter_sorter__3M04B\"};","import { SorterArray } from \"./SorterArray\";\r\n\r\nexport type SorterAlgorithmReturnType = [number | undefined, number | undefined];\r\nexport type SorterAlgorithmGenerator = Generator<SorterAlgorithmReturnType>\r\nexport type SorterAlgorithmType = (array: SorterArray, indicesSorted: Set<number>) => SorterAlgorithmGenerator;\r\n\r\nfunction* BubbleSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let i = 0; i < length - 1; i++) {\r\n    let j;\r\n    let sorted = true;\r\n    for(j = 0; j < length - 1 - i; j++) {\r\n      yield [j, j+1];\r\n\r\n      if(array.gt(j, j+1)) {\r\n        array.swap(j, j+1);\r\n        sorted = false;\r\n      }\r\n    }\r\n    indicesSorted.add(j);\r\n    if(sorted) {\r\n      for(let k = 0; k < j; k++) {\r\n        indicesSorted.add(k);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  indicesSorted.add(0);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* CocktailShakerSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  let lower = 0;\r\n  let upper = length - 1;\r\n  let swapped = false;\r\n\r\n  do {\r\n    swapped = false;\r\n    for(let i = lower; i < upper; i++) {\r\n      yield [i, i+1];\r\n      if(array.gt(i, i+1)) {\r\n        array.swap(i, i+1);\r\n        swapped = true;\r\n      }\r\n    }\r\n    indicesSorted.add(upper);\r\n    upper = upper - 1;\r\n\r\n    // if(!swapped) {\r\n    //   break;\r\n    // }\r\n\r\n    swapped = false;\r\n    for(let i = upper; i > lower; i--) {\r\n      yield [i-1, i];\r\n      if(array.gt(i-1, i)) {\r\n        array.swap(i-1, i);\r\n        swapped = true;\r\n      }\r\n    }\r\n    indicesSorted.add(lower);\r\n    lower = lower + 1;\r\n  } while(swapped)\r\n\r\n  for(let i = lower; i <= upper; i++) {\r\n    indicesSorted.add(i);\r\n  }\r\n\r\n  yield [undefined, undefined];\r\n\r\n  return\r\n}\r\n\r\nfunction* SelectionSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let i = 0; i < length; i++) {\r\n    let best = i;\r\n    for(let j = i + 1; j < length; j++) {\r\n      yield [best, j];\r\n      if(array.gt(best, j)) {\r\n        best = j;\r\n      }\r\n    }\r\n\r\n    if(best !== i) {\r\n      array.swap(i, best);\r\n    }\r\n    indicesSorted.add(i);\r\n  }\r\n  yield [undefined, undefined];\r\n\r\n  return\r\n}\r\n\r\nfunction* InsertionSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  indicesSorted.add(0);\r\n\r\n  for(let i = 1; i < length; i++) {\r\n    indicesSorted.add(i);\r\n    for(let j = i - 1; j >= 0; j--) {\r\n      yield [j, j+1];\r\n      if(array.gt(j, j+1)) {\r\n        array.swap(j, j+1);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* QuickSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  function* qs(lo: number, hi: number): SorterAlgorithmGenerator {\r\n    if(lo < hi)\r\n    {\r\n      let mid = Math.floor((lo + hi)/2);\r\n      let i = lo - 1;\r\n      let j = hi + 1;\r\n      while(true) {\r\n        do {\r\n          i = i + 1;\r\n          yield [i, mid];\r\n        } while(array.lt(i, mid))\r\n        do {\r\n          j = j - 1;\r\n          yield [mid, j];\r\n        } while(array.gt(j, mid))\r\n        if(i >= j) {\r\n          break\r\n        }\r\n        array.swap(i, j);\r\n        if(mid === i) {\r\n          mid = j\r\n        } else if(mid === j) {\r\n          mid = i\r\n        }\r\n      }\r\n    \r\n      yield* qs(lo, j);\r\n      yield* qs(j+1, hi);\r\n    } else {\r\n      indicesSorted.add(lo);\r\n    }\r\n  }\r\n\r\n  yield* qs(0, length-1);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* HeapSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  function* shiftDown(start: number, end: number): SorterAlgorithmGenerator {\r\n    let root = start;\r\n    let child;\r\n\r\n    while((child = 2 * root + 1) <= end) {\r\n      let swap = root;\r\n      yield [swap, child];\r\n      if(array.lt(swap, child)) {\r\n        swap = child;\r\n      }\r\n      yield [swap, child+1];\r\n      if(child+1 <= end && array.lt(swap, child + 1)) {\r\n        swap = child + 1;\r\n      }\r\n      if(swap === root) {\r\n        return;\r\n      } else {\r\n        array.swap(root, swap);\r\n        root = swap;\r\n      }\r\n    }\r\n  }\r\n  function* heapify() {\r\n    for(let start = Math.floor((length-2) / 2); start >= 0; start--) {\r\n      yield* shiftDown(start, length - 1);\r\n    }\r\n  }\r\n\r\n  yield* heapify();\r\n\r\n  for(let end = length - 1; end > 0; end--) {\r\n    array.swap(end, 0);\r\n    indicesSorted.add(end);\r\n    yield* shiftDown(0, end-1);\r\n  }\r\n\r\n  indicesSorted.add(0);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* ShellSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n  const gaps = [701, 301, 132, 57, 23, 10, 4, 1]\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let gap of gaps) {\r\n    for(let i = gap; i < length; i++) {\r\n      for(let j = i; j >= gap; j -= gap) {\r\n        yield [j - gap, j];\r\n        if(array.gt(j - gap, j)) {\r\n          array.swap(j - gap, j);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      if(gap === 1) {\r\n        indicesSorted.add(i-1);\r\n      }\r\n    }\r\n  }\r\n\r\n  indicesSorted.add(length-1);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* CombSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  let gap = length;\r\n  const shrink = 1.3;\r\n  let isSorted = false;\r\n\r\n  while(isSorted === false) {\r\n    gap = Math.floor(gap / shrink);\r\n\r\n    if(gap <= 1) {\r\n      gap = 1;\r\n      isSorted = true;\r\n    }\r\n\r\n    for(let i = 0; i + gap < length; i++) {\r\n      yield [i, i + gap];\r\n      if(array.gt(i, i + gap)) {\r\n        array.swap(i, i + gap);\r\n        isSorted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for(let i = 0; i < length; i++) {indicesSorted.add(i)}\r\n  \r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nexport const algorithms = {\r\n  BubbleSort,\r\n  CocktailShakerSort,\r\n  SelectionSort,\r\n  InsertionSort,\r\n  QuickSort,\r\n  HeapSort,\r\n  ShellSort,\r\n  CombSort,\r\n}\r\n\r\nexport type AlgorithmName = keyof typeof algorithms;\r\n\r\nexport const algorithmNames = Object.keys(algorithms) as AlgorithmName[];","import { AlgorithmName, algorithms } from \"../Sorter/SorterAlgorithms\";\r\n\r\ntype AlgorithmSelectionProps = {\r\n  algorithm: AlgorithmName\r\n  onChange?: (algorithm: AlgorithmName) => void\r\n  disabled?: boolean,\r\n}\r\n\r\nconst algorithmNameList = Object.keys(algorithms);\r\n\r\nexport function AlgorithmSelection({algorithm, onChange, disabled=false}: AlgorithmSelectionProps) {\r\n\r\n  return (\r\n    <select className=\"form-select\" value={algorithm} disabled={disabled} onChange={(event) => {\r\n      const value = event.target.value;\r\n\r\n      if(algorithmNameList.includes(value) && onChange) {\r\n        onChange(value as AlgorithmName);\r\n      }\r\n    }}>\r\n      {algorithmNameList.map(name => <option key={name} value={name}>{name}</option>)}\r\n    </select>\r\n  );\r\n}","import { ReactNode, useState } from \"react\"\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\ntype LabeledSelectProps = {\r\n  text?: string;\r\n  value?: string | number;\r\n  disabled?: boolean;\r\n  onChange?: React.ChangeEventHandler<HTMLSelectElement>;\r\n  children?: ReactNode;\r\n}\r\n\r\nconst idGenerator = function*() {\r\n  let i = 0;\r\n  while(true) {\r\n    yield i++;\r\n  }\r\n}();\r\n\r\nconst getId = () => idGenerator.next().value;\r\n\r\nexport function LabeledSelect({text, value, onChange, disabled=false, children}: LabeledSelectProps) {\r\n\r\n  const [id] = useState(getId());\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs=\"6\" lg=\"auto\">\r\n          <label htmlFor={`LabeledSelect-${id}`} className=\"form-label col-form-label\">{text}</label>\r\n        </Col>\r\n        <Col xs=\"6\" lg=\"auto\">\r\n          <select id={`LabeledSelect-${id}`} className=\"form-select\" value={value} onChange={onChange} disabled={disabled}>\r\n            {children}\r\n          </select>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","import { useEffect } from \"react\";\r\nimport { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype DataPresetSelectionProps = {\r\n  count: number;\r\n  preset?: DataPreset;\r\n  onPresetChange?: (preset: DataPreset) => void;\r\n  onDataChange?: (data: number[]) => void;\r\n};\r\n\r\nexport type DataPreset = keyof typeof dataGenerators;\r\n\r\nfunction shuffleFisherYates(array: Array<number>) {\r\n  let i = array.length;\r\n  while (i--) {\r\n    const ri = Math.floor(Math.random() * i);\r\n    [array[i], array[ri]] = [array[ri], array[i]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction sortedData(count: number) {\r\n  const result: number[] = [];\r\n\r\n  for(let i=0; i<count; i++) {\r\n    result[i] = 1/count * (i+1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction reverseSortedData(count: number) {\r\n  return sortedData(count).reverse();\r\n}\r\n\r\nfunction shuffledData(count: number) {\r\n  return shuffleFisherYates(sortedData(count));\r\n}\r\n\r\nfunction fewUniqueData(count: number, uniques: number = 16) {\r\n  const result: number[] = [];\r\n\r\n  for(let i = 1; i <= uniques; i++) {\r\n    while (result.length < count/uniques * i) {\r\n      result.push(i/uniques);\r\n    }\r\n  }\r\n\r\n  return shuffleFisherYates(result);\r\n}\r\n\r\nconst dataGenerators = {\r\n  shuffled: shuffledData,\r\n  sorted: sortedData,\r\n  reverseSorted: reverseSortedData,\r\n  fewUnique: fewUniqueData,\r\n}\r\n\r\nexport const dataPresets = Object.keys(dataGenerators) as DataPreset[];\r\n\r\nexport function DataPresetSelection({count, preset='shuffled', onPresetChange, onDataChange}: DataPresetSelectionProps) {\r\n  useEffect(() => {\r\n    if(onDataChange) onDataChange(dataGenerators[preset](count));\r\n  }, [preset, count, onDataChange]);\r\n\r\n  return (\r\n    <LabeledSelect text=\"Data Preset\" value={preset} onChange={(event) => {\r\n      if(onPresetChange) {\r\n        const preset = event.target.value as DataPreset;\r\n        onPresetChange(preset);\r\n      }\r\n    }}>\r\n      <option value=\"shuffled\">Shuffled</option>\r\n      <option value=\"sorted\">Sorted</option>\r\n      <option value=\"reverseSorted\">Reverse Sorted</option>\r\n      <option value=\"fewUnique\">Few Unique</option>\r\n    </LabeledSelect>\r\n  );\r\n}","import { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype SleepTimeSelectionProps = {\r\n  sleepTime: number\r\n  options: number[];\r\n  onChange?: (sleepTime: number) => void;\r\n};\r\n\r\nexport function SleepTimeSelection({sleepTime, options, onChange}: SleepTimeSelectionProps) {\r\n  return(\r\n    <LabeledSelect text=\"Sleep Time\" value={sleepTime} onChange={(event) => {\r\n      const value = parseFloat(event.target.value);\r\n\r\n      if(onChange && !isNaN(value)) {\r\n        onChange(value);\r\n      }\r\n    }}>\r\n      {options.map(value => <option key={value} value={value}>{value}ms</option>)}\r\n    </LabeledSelect>\r\n  );\r\n}","import styles from './Canvas.module.scss';\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\r\n\r\ntype CanvasProps = {\r\n  draw: (ctx: CanvasRenderingContext2D, frameTime: number, avgFrameTime: number, frameCount: number) => void;\r\n  setup?: (ctx: CanvasRenderingContext2D) => void;\r\n  redraw?: () => boolean;\r\n}\r\n\r\nexport function Canvas ({draw, setup, redraw=()=>true}: CanvasProps) {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const frameTime = useRef(1000);\r\n  const frameCount = useRef(0);\r\n  const lastFrameTime = useRef(0);\r\n\r\n  const canvasDimensions = useResizeObserver(canvasRef);\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current?.getContext('2d');\r\n    if(context) {\r\n      context.canvas.width = canvasDimensions?.width || 0\r\n      context.canvas.height = canvasDimensions?.height || 0;\r\n\r\n      if (setup) {\r\n        setup(context);\r\n      }\r\n\r\n      draw(context, frameTime.current, frameTime.current, frameCount.current);\r\n    }\r\n  }, [canvasDimensions, setup, draw]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas?.getContext('2d');\r\n    if(!context) return;\r\n\r\n    if(setup) {\r\n      setup(context);\r\n    }\r\n    \r\n    let t0 = performance.now();\r\n\r\n    let animationFrameId: number;\r\n\r\n    const render = () => {\r\n      if(redraw()) {\r\n        frameCount.current++;\r\n        const t1 = performance.now()\r\n        lastFrameTime.current = t1 - t0;\r\n        draw(context, lastFrameTime.current, frameTime.current, frameCount.current);\r\n        t0 = t1;\r\n      }\r\n\r\n      frameTime.current += (lastFrameTime.current - frameTime.current) / 20;\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    }\r\n    render();\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    }\r\n  }, [redraw, draw, setup]);\r\n\r\n  return <canvas ref={canvasRef} className={styles.canvas} />\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport const useResizeObserver = (ref: { current: any }) => {\r\n  const [dimensions, setDimensions] = useState<DOMRectReadOnly>();\r\n  useEffect(() => {\r\n      const observeTarget = ref.current;\r\n      const resizeObserver = new ResizeObserver((entries) => {\r\n          entries.forEach((entry) => {\r\n              setDimensions(entry.contentRect);\r\n          });\r\n      });\r\n      resizeObserver.observe(observeTarget);\r\n      return () => {\r\n          resizeObserver.unobserve(observeTarget);\r\n      };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n","\r\nfunction cloneArray<T>(array: Array<T>) {\r\n  const result = [];\r\n  let i = array.length;\r\n  while(i--) {\r\n    result[i] = array[i];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class SorterArray {\r\n  private array: number[];\r\n  private compareFn: (a: number, b: number) => number;\r\n  private _accesses: number = 0;\r\n  private _comparisons: number = 0;\r\n\r\n  constructor(array: number[], compareFn: (a: number, b: number) => number) {\r\n    this.array = cloneArray(array);\r\n    this.compareFn = compareFn;\r\n  }\r\n\r\n  get length() {\r\n    return this.array.length;\r\n  }\r\n\r\n  private validateIndex(i: number) {\r\n    if(i >= this.array.length || i < 0) throw new RangeError('index out of range');\r\n  }\r\n\r\n  value(i: number) {\r\n    this.validateIndex(i);  \r\n\r\n    return this.array[i];\r\n  }\r\n\r\n  get(i: number) {\r\n    this.validateIndex(i);  \r\n\r\n    this._accesses = this._accesses + 1;\r\n    return this.array[i];\r\n  }\r\n\r\n  private set(i: number, v: number) {\r\n    this.validateIndex(i);    \r\n\r\n    this._accesses = this._accesses + 1\r\n    this.array[i] = v;\r\n  }\r\n\r\n  private compare(i: number, j: number) {\r\n    this._comparisons = this._comparisons + 1;\r\n    return this.compareFn(this.get(i), this.get(j));\r\n  }\r\n\r\n  lt(i: number, j: number) {\r\n    return this.compare(i, j) < 0;\r\n  }\r\n\r\n  gt(i: number, j: number) {\r\n    return this.compare(i, j) > 0;\r\n  }\r\n\r\n  lte(i: number, j: number) {\r\n    return this.compare(i, j) <= 0;\r\n  }\r\n\r\n  gte(i: number, j: number) {\r\n    return this.compare(i, j) >= 0;\r\n  }\r\n\r\n  eq(i: number, j: number) {\r\n    return this.compare(i, j) === 0;\r\n  }\r\n\r\n  swap(i: number, j: number) {\r\n    const temp = this.get(i);\r\n\r\n    this.set(i, this.get(j));\r\n    this.set(j, temp);\r\n  }\r\n\r\n  get accesses() {\r\n    return this._accesses;\r\n  }\r\n\r\n  get comparisons() {\r\n    return this._comparisons;\r\n  }\r\n\r\n  get values() {\r\n    return cloneArray(this.array);\r\n  }\r\n}","import { AlgorithmName, algorithms, SorterAlgorithmGenerator } from \"./SorterAlgorithms\";\r\nimport { SorterArray } from \"./SorterArray\";\r\n\r\n\r\nexport class SorterLogic {\r\n  static readonly compareFn = (i: number, j: number) => i - j;\r\n  static readonly minDelay = 10;\r\n\r\n\r\n  private trueDelay: number = SorterLogic.minDelay;\r\n  private delay: number = this.trueDelay;\r\n\r\n  private generator: SorterAlgorithmGenerator;\r\n  private values: SorterArray;\r\n  private indidcesSorted = new Set<number>();\r\n  private lastCompared: [number | undefined, number | undefined] = [undefined, undefined];\r\n\r\n  private step = 0;\r\n  private tStart = 0;\r\n\r\n  private sleepTime = 0;\r\n  private realTime = 0;\r\n\r\n  private timeout = 0;\r\n  private running = false;\r\n\r\n  private updated = true;\r\n  private finished = false;\r\n\r\n  private onFinished: (() => void) | undefined;\r\n\r\n  constructor(data: number[], algorithm: AlgorithmName, delay: number, onFinished?: () => void) {\r\n    this.values = new SorterArray(data, SorterLogic.compareFn);\r\n    this.generator = algorithms[algorithm](this.values, this.indidcesSorted);\r\n    this.onFinished = onFinished;\r\n\r\n    this.setDelay(delay);\r\n\r\n    this.loop = this.loop.bind(this);\r\n  }\r\n\r\n  runNext() {\r\n    const next = this.generator.next();\r\n\r\n    if(!next.done){\r\n      const [i, j] = next.value;\r\n\r\n      this.lastCompared = [i, j];\r\n    } else {\r\n      this.lastCompared = [undefined, undefined];\r\n    }\r\n\r\n    this.updated = true;\r\n\r\n    return !next.done;\r\n  }\r\n\r\n  private loop() {\r\n    const t0 = performance.now();\r\n\r\n    this.sleepTime = this.sleepTime + this.trueDelay;\r\n\r\n    let hasNext;\r\n    do {\r\n      hasNext = this.runNext();\r\n      this.step = this.step + 1;\r\n    } while(hasNext && t0 - this.tStart > this.delay * this.step)\r\n\r\n    if(!hasNext) {\r\n      this.pause();\r\n      this.finished = true;\r\n      if(this.onFinished) this.onFinished();\r\n    }\r\n\r\n    this.realTime = this.realTime + performance.now() - t0; \r\n  }\r\n\r\n  start() {\r\n    if(!this.finished && !this.running)\r\n    {\r\n      this.timeout = window.setInterval(this.loop, this.trueDelay);\r\n      this.running = true;\r\n      this.tStart = performance.now();\r\n      this.step = 0;\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    if(this.running) {\r\n      clearInterval(this.timeout);\r\n      this.running = false;\r\n    }\r\n  }\r\n\r\n  didUpdate() {\r\n    return this.updated;\r\n  }\r\n\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  isFinished() {\r\n    return this.finished;\r\n  }\r\n\r\n  getSleepTime() {\r\n    return this.sleepTime;\r\n  }\r\n\r\n  getRealTime() {\r\n    return this.realTime;\r\n  }\r\n\r\n  getLastCompared() {\r\n    return this.lastCompared;\r\n  }\r\n\r\n  getIndicesSorted() {\r\n    return this.indidcesSorted;\r\n  }\r\n\r\n  getValues() {\r\n    return this.values.values;\r\n  }\r\n\r\n  getDelay() {\r\n    return this.delay;\r\n  }\r\n\r\n  getTrueDelay() {\r\n    return this.trueDelay;\r\n  }\r\n\r\n  getComparisons() {\r\n    return this.values.comparisons;\r\n  }\r\n\r\n  getAccesses() {\r\n    return this.values.accesses;\r\n  }\r\n\r\n  getLastState() {\r\n    this.updated = false;\r\n\r\n    return {\r\n      values: this.getValues(),\r\n      indicesSorted: this.getIndicesSorted(),\r\n      lastCompared: this.getLastCompared(),\r\n      comparisons: this.getComparisons(),\r\n      accesses: this.getAccesses(),\r\n    };\r\n  }\r\n\r\n  setDelay(delay: number) {\r\n    this.delay = Math.max(delay, 0);\r\n    this.trueDelay = Math.max(SorterLogic.minDelay, this.delay);\r\n\r\n    if(this.running) {\r\n      this.pause();\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  setOnFinished(callback: (() => void) | undefined) {\r\n    this.onFinished = callback;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { Canvas } from \"../Canvas/Canvas\";\r\nimport { AlgorithmName } from \"./SorterAlgorithms\";\r\nimport { SorterLogic } from \"./SorterLogic\";\r\nimport styles from './Sorter.module.scss';\r\n\r\ntype SorterProps = {\r\n  data: number[];\r\n  algorithm: AlgorithmName;\r\n  sleepTime: number,\r\n  border: number;\r\n  defaultColor: string;\r\n  comparedColor: string;\r\n  sortedColor: string;\r\n  onFinished?: () => void;\r\n  onMaxValuesChange?: (maxValues: number) => void;\r\n};\r\n\r\ntype SorterState = {\r\n  logic: SorterLogic;\r\n};\r\n\r\nexport class Sorter extends Component<SorterProps, SorterState> {\r\n  static defaultProps = { \r\n    algorithm: 'BubbleSort', \r\n    sleepTime: 100, \r\n    border: 1,\r\n    defaultColor: 'lightblue',\r\n    comparedColor: 'red',\r\n    sortedColor: 'green',\r\n  };\r\n\r\n  private maxValues = 0;\r\n\r\n  constructor(props: SorterProps) {\r\n    super(props);\r\n\r\n    this.redraw = this.redraw.bind(this);\r\n    this.draw= this.draw.bind(this);\r\n    this.onFinished = this.onFinished.bind(this);\r\n\r\n    const logic = new SorterLogic(props.data, props.algorithm, props.sleepTime, this.onFinished)\r\n\r\n    this.state = {\r\n      logic: logic,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: SorterProps, prevState: SorterState) {\r\n    const { data, algorithm, sleepTime } = this.props;\r\n    const { logic } = this.state;\r\n\r\n    if (prevState.logic !== logic) {\r\n      prevState.logic.pause();\r\n    }\r\n\r\n    if (prevProps.data !== data || prevProps.algorithm !== algorithm) {\r\n      this.reset();\r\n    }\r\n\r\n    if (prevProps.sleepTime !== sleepTime) {\r\n      logic.setDelay(sleepTime);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pause();\r\n  }\r\n\r\n  start() {\r\n    this.state.logic.start();\r\n  }\r\n\r\n  pause() {\r\n    this.state.logic.pause();\r\n  }\r\n\r\n  onFinished() {\r\n    const { onFinished } = this.props;\r\n\r\n    this.pause();\r\n    if(onFinished) onFinished();\r\n  }\r\n\r\n  reset() {\r\n    const { data, algorithm, sleepTime } = this.props;\r\n\r\n    const logic = new SorterLogic(data, algorithm, sleepTime, this.onFinished);\r\n\r\n    this.setState({\r\n      logic: logic,\r\n    });\r\n  }\r\n\r\n  isRunning() {\r\n    return this.state.logic.isRunning();\r\n  }\r\n\r\n  isFinished() {\r\n    return this.state.logic.isFinished();\r\n  }\r\n\r\n  private setMaxValues(maxValues: number) {\r\n    const { onMaxValuesChange } = this.props;\r\n\r\n    if(onMaxValuesChange && maxValues !== this.maxValues) {\r\n      onMaxValuesChange(maxValues);\r\n    }\r\n    this.maxValues = maxValues;\r\n  }\r\n\r\n  private redraw() {\r\n    return this.state.logic.didUpdate();\r\n  }\r\n\r\n  private draw (ctx: CanvasRenderingContext2D, frameTime:number, avgFrameTime: number) {\r\n    const {\r\n      border,\r\n      defaultColor,\r\n      sortedColor,\r\n      comparedColor,\r\n    } = this.props;\r\n\r\n    const { logic } = this.state;\r\n\r\n    if(logic) {\r\n      const width = ctx.canvas.width;\r\n      const height = ctx.canvas.height;\r\n      const borderWidth = Math.ceil(Math.max(width, height) / 100 * border * 0.5)\r\n      const innerWidth = width - 2 * borderWidth;\r\n      const innerHeight = height - 2 * borderWidth;\r\n\r\n      this.setMaxValues(innerWidth);\r\n\r\n      ctx.clearRect(0, 0, width, height);\r\n\r\n      const {values, lastCompared, indicesSorted, comparisons, accesses} = logic.getLastState();\r\n\r\n      const elementWidth = Math.floor(innerWidth / values.length);\r\n      const offset = (width - elementWidth * values.length) / 2;\r\n\r\n      ctx.fillStyle = 'white';\r\n      ctx.fillRect(offset - borderWidth * 0.5, borderWidth * 0.5, (width - 2 * offset + borderWidth), innerHeight + borderWidth);\r\n\r\n      values.forEach((value, i) => {\r\n        let color = defaultColor;\r\n\r\n        if(indicesSorted.has(i)) color = sortedColor;\r\n        if(lastCompared.includes(i)) color = comparedColor;\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(offset + elementWidth * i, innerHeight + borderWidth - innerHeight*value, elementWidth*1.05, innerHeight*value)\r\n      });\r\n\r\n      if(borderWidth > 0)\r\n      {\r\n        ctx.lineWidth = borderWidth;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.strokeRect(offset - borderWidth * 0.5, borderWidth * 0.5, (width - 2 * offset + borderWidth), innerHeight + borderWidth);\r\n      }\r\n\r\n      const fontSize = innerHeight / 20;\r\n      const textX = offset + borderWidth\r\n      const textY = borderWidth;\r\n      ctx.font = `${fontSize}px sans-serif`;\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillText(`Comparisons: ${comparisons}`,textX, textY  + fontSize);\r\n      ctx.fillText(`Array Accesses: ${accesses}`, textX, textY  + fontSize * 2);\r\n      ctx.fillText(`Real Time: ${logic.getRealTime().toFixed(1)}ms`, textX, textY + fontSize * 3);\r\n      ctx.fillText(`Sleep Time: ${(logic.getSleepTime()/1000).toFixed(1)}s`, textX, textY + fontSize * 4);\r\n\r\n      if(logic.isRunning()) {\r\n        ctx.fillText(`fps: ${(1000/avgFrameTime).toFixed(0)}`, textX, textY + fontSize * 5);\r\n      } else {\r\n        ctx.fillText('fps: -', textX, textY + fontSize * 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.sorter}>\r\n        <Canvas draw={this.draw} redraw={this.redraw} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype ValueCountSelectionProps = {\r\n  valueCount: number,\r\n  maxValue: number,\r\n  onChange?: (valueCount: number) => void;\r\n};\r\n\r\nexport function ValueCountSelection({valueCount, maxValue, onChange}: ValueCountSelectionProps) {\r\n  const values: number[] = useMemo(() => {\r\n    const result = [];\r\n\r\n    for(let i = 16; i < maxValue; i *= 2) {\r\n      result.push(i);\r\n    }\r\n    result.push(maxValue);\r\n\r\n    return result;\r\n  }, [maxValue]);\r\n\r\n  useEffect(() => {\r\n    if(!onChange) return;\r\n    \r\n    if(valueCount > maxValue) onChange(maxValue);\r\n    else if(valueCount < maxValue && !values.includes(valueCount)) {\r\n      for(let i = 0; i < values.length; i++) {\r\n        if(values[i] > valueCount) {\r\n          onChange(values[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }, [valueCount, maxValue, onChange, values]);\r\n\r\n  return (\r\n    <LabeledSelect text=\"Values\" value={valueCount} onChange={(event) => {\r\n      const value = parseInt(event.target.value);\r\n\r\n      if(!isNaN(value) && onChange) {\r\n        onChange(value);\r\n      }\r\n    }}>\r\n      {values.map(value => <option key={value} value={value}>{value}</option>)}\r\n    </LabeledSelect>\r\n  );\r\n}","import { useMemo } from \"react\";\r\nimport { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype WindowNumberSelectProps = {\r\n  number: number;\r\n  onChange?: (n: number) => void;\r\n};\r\n\r\nexport function WindowNumberSelect({number, onChange}: WindowNumberSelectProps) {\r\n\r\n  const options = useMemo(() => {\r\n    const temp = [];\r\n    for(let i = 1; i <= 8; i++) {\r\n      temp[i] = <option key={i} value={i}>{i}</option>;\r\n    }\r\n\r\n    return temp;\r\n  }, []);\r\n\r\n  return (\r\n    <LabeledSelect text=\"Windows\" value={number} onChange={(event) => {\r\n      const number = parseInt(event.target.value);\r\n\r\n      if(!isNaN(number) && onChange) {\r\n        onChange(number);\r\n      }\r\n    }}>\r\n      {options}\r\n    </LabeledSelect>\r\n  );\r\n}","import { createRef, RefObject, useCallback, useMemo, useRef, useState } from 'react';\r\nimport { Container, Nav, Navbar, Row } from 'react-bootstrap';\r\nimport { AlgorithmSelection } from '../AlgorithmSelection/AlgorithmSelection';\r\nimport { DataPreset, DataPresetSelection } from '../DataPresetSelection/DataPresetSelection';\r\nimport { SleepTimeSelection } from '../SleepTimeSelection/SleepTimeSelection';\r\nimport { Sorter } from '../Sorter/Sorter';\r\nimport { AlgorithmName, algorithmNames } from '../Sorter/SorterAlgorithms';\r\nimport { ValueCountSelection } from '../ValueCountSelection/ValueCountSelection';\r\nimport { WindowNumberSelect } from '../WindowNumberSelect/WindowNumberSelect';\r\nimport styles from './SortingApp.module.scss';\r\n\r\nexport function SortingApp() {\r\n  const [preset, setPreset] = useState<DataPreset>('shuffled');\r\n  const [data, setData] = useState<Array<number>>([]);\r\n  const [valueCount, setValueCount] = useState(16);\r\n  const [sleepTime, setSleepTime] = useState(500);\r\n  const [maxValues, setMaxValues] = useState(valueCount);\r\n  const [numWindows, setNumWindows] = useState(1);\r\n\r\n  const [algorithms, setAlgorithms] = useState<AlgorithmName[]>([...algorithmNames]);\r\n\r\n  const setAlgorithm = useCallback((i: number, value: AlgorithmName) => {\r\n    setAlgorithms((previous) => {\r\n      const temp = [...previous];\r\n      temp[i] = value;\r\n\r\n      return temp;\r\n    })\r\n  }, [setAlgorithms]);\r\n\r\n  const sorterRef = useRef<RefObject<Sorter>[]>([]);\r\n\r\n  for(let i = 0; i<8; i++) {\r\n    sorterRef.current[i] = sorterRef.current[i] ?? createRef<Sorter>();\r\n  }\r\n\r\n  const windows = useMemo(() => {\r\n    const temp = [];\r\n    \r\n    for(let i = 0; i<numWindows; i++) {\r\n      temp[i] = (\r\n        <div key={i} className={`${styles.sorterContainer} col-xl-6`} style={{height: '400px'}}>\r\n          <div className={styles.algorithmSelection} >\r\n            <AlgorithmSelection algorithm={algorithms[i]} onChange={(algorithm) => setAlgorithm(i, algorithm)} />\r\n          </div>\r\n          <Sorter \r\n            ref={sorterRef.current[i]} \r\n            data={data} \r\n            algorithm={algorithms[i]} \r\n            sleepTime={sleepTime} \r\n            onMaxValuesChange={setMaxValues} \r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return temp;\r\n  }, [numWindows, algorithms, data, setAlgorithm, sleepTime]);\r\n\r\n  return (\r\n    <div className={styles.appContainer}>\r\n      <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-dark bg-secondary\">\r\n        <Container fluid>\r\n          <Navbar.Toggle />\r\n          <Navbar.Brand>S-A-V</Navbar.Brand>\r\n          <Navbar.Collapse>\r\n            <Nav className=\"w-100 justify-content-center\">\r\n              <Nav.Item>\r\n                <DataPresetSelection preset={preset} onPresetChange={setPreset} onDataChange={setData} count={valueCount} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <ValueCountSelection valueCount={valueCount} maxValue={maxValues} onChange={setValueCount} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <SleepTimeSelection sleepTime={sleepTime} onChange={setSleepTime} options={[500, 250, 100, 50, 25, 10, 5, 1]} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <WindowNumberSelect number={numWindows} onChange={setNumWindows} />\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <Container>\r\n        <Row>\r\n          {windows}\r\n        </Row>\r\n      </Container>\r\n      <Nav className=\"fixed-bottom navbar-dark bg-secondary py-2\">\r\n        <Container>\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={()=>sorterRef.current?.forEach(ref => ref.current?.start())}\r\n          ><span className=\"bi bi-play-fill\" /> Start</button>\r\n\r\n          <button \r\n            className=\"btn btn-primary\" \r\n            onClick={()=>sorterRef.current?.forEach(ref => ref.current?.pause())}\r\n          ><span className=\"bi bi-pause-fill\" /> Pause</button>\r\n\r\n          <button \r\n            className=\"btn btn-danger\"\r\n            onClick={()=>sorterRef.current?.forEach(ref => ref.current?.reset())}\r\n          ><span className=\"bi bi-arrow-counterclockwise\" /> Reset</button>\r\n        </Container>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}","import { SortingApp } from './components/SortingApp/SortingApp';\n\nfunction App() {\n  return (\n    <SortingApp />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}