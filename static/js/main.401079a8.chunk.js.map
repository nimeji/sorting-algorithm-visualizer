{"version":3,"sources":["components/SortingApp/SortingApp.module.scss","components/Canvas/Canvas.module.scss","components/Sorter/Sorter.module.scss","components/LabeledSelect/LabeledSelect.tsx","components/Sorter/SorterAlgorithms.ts","components/AlgorithmSelection/AlgorithmSelection.tsx","components/DataPresetSelection/DataPresetSelection.tsx","components/SleepTimeSelection/SleepTimeSelection.tsx","components/Canvas/Canvas.tsx","hooks/useResizeObserver.ts","components/Sorter/SorterArray.ts","components/Sorter/SorterLogic.ts","components/Sorter/Sorter.tsx","components/ValueCountSelection/ValueCountSelection.tsx","components/SortingApp/SortingApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","idGenerator","i","LabeledSelect","text","value","onChange","disabled","children","useState","next","id","Container","Row","Col","xs","xl","htmlFor","className","BubbleSort","CocktailShakerSort","SelectionSort","InsertionSort","QuickSort","HeapSort","ShellSort","CombSort","array","indicesSorted","length","j","sorted","gt","swap","add","k","undefined","lower","upper","swapped","best","qs","lo","hi","mid","Math","floor","lt","shiftDown","heapify","start","end","root","child","gaps","gap","shrink","isSorted","algorithms","algorithmNameList","Object","keys","AlgorithmSelection","algorithm","event","target","includes","map","name","shuffleFisherYates","ri","random","sortedData","count","result","dataGenerators","shuffled","reverseSorted","reverse","fewUnique","uniques","push","DataPresetSelection","preset","onPresetChange","onDataChange","useEffect","SleepTimeSelection","sleepTime","options","parseFloat","isNaN","Canvas","draw","redraw","canvasRef","useRef","wrapperRef","frameTime","frameCount","lastFrameTime","wrapperDimensions","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","canvas","width","height","context","getContext","animationFrameId","t0","performance","now","render","t1","window","requestAnimationFrame","cancelAnimationFrame","styles","canvasWrapper","cloneArray","SorterArray","compareFn","_accesses","_comparisons","this","RangeError","validateIndex","v","get","compare","temp","set","SorterLogic","data","delay","onFinished","trueDelay","minDelay","generator","values","indidcesSorted","Set","lastCompared","step","tStart","realTime","timeout","running","updated","finished","setDelay","loop","bind","done","hasNext","runNext","pause","setInterval","clearInterval","comparisons","accesses","getValues","getIndicesSorted","getLastCompared","getComparisons","getAccesses","max","callback","Sorter","props","maxValues","logic","state","prevProps","prevState","reset","setState","isRunning","isFinished","onMaxValuesChange","didUpdate","ctx","avgFrameTime","border","defaultColor","sortedColor","comparedColor","borderWidth","ceil","innerWidth","innerHeight","setMaxValues","clearRect","getLastState","elementWidth","offset","fillStyle","fillRect","color","has","lineWidth","strokeStyle","strokeRect","fontSize","textX","textY","font","fillText","getRealTime","toFixed","getSleepTime","sorter","Component","ValueCountSelection","valueCount","maxValue","useMemo","parseInt","defaultProps","SortingApp","setPreset","setData","setValueCount","setSleepTime","setAlgorithm","enableStart","setEnableStart","enablePause","setEnablePause","sorterRef","appContainer","Navbar","collapseOnSelect","expand","fluid","Toggle","Brand","Collapse","Nav","Item","sorterContainer","footer","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.401079a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"SortingApp_appContainer__1KHYU\",\"sorterContainer\":\"SortingApp_sorterContainer__37Mem\",\"footer\":\"SortingApp_footer__13xJ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__3fvzk\",\"canvasWrapper\":\"Canvas_canvasWrapper__1n_4t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sorter\":\"Sorter_sorter__3M04B\"};","import { ReactNode, useState } from \"react\"\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\ntype LabeledSelectProps = {\r\n  text?: string;\r\n  value?: string | number;\r\n  disabled?: boolean;\r\n  onChange?: React.ChangeEventHandler<HTMLSelectElement>;\r\n  children?: ReactNode;\r\n}\r\n\r\nconst idGenerator = function*() {\r\n  let i = 0;\r\n  while(true) {\r\n    yield i++;\r\n  }\r\n}();\r\n\r\nconst getId = () => idGenerator.next().value;\r\n\r\nexport function LabeledSelect({text, value, onChange, disabled=false, children}: LabeledSelectProps) {\r\n\r\n  const [id] = useState(getId());\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs=\"6\" xl=\"auto\">\r\n          <label htmlFor={`LabeledSelect-${id}`} className=\"form-label col-form-label\">{text}</label>\r\n        </Col>\r\n        <Col xs=\"6\" xl=\"auto\">\r\n          <select id={`LabeledSelect-${id}`} className=\"form-select\" value={value} onChange={onChange} disabled={disabled}>\r\n            {children}\r\n          </select>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","import { SorterArray } from \"./SorterArray\";\r\n\r\nexport type SorterAlgorithmReturnType = [number | undefined, number | undefined];\r\nexport type SorterAlgorithmGenerator = Generator<SorterAlgorithmReturnType>\r\nexport type SorterAlgorithmType = (array: SorterArray, indicesSorted: Set<number>) => SorterAlgorithmGenerator;\r\n\r\nfunction* BubbleSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let i = 0; i < length - 1; i++) {\r\n    let j;\r\n    let sorted = true;\r\n    for(j = 0; j < length - 1 - i; j++) {\r\n      yield [j, j+1];\r\n\r\n      if(array.gt(j, j+1)) {\r\n        array.swap(j, j+1);\r\n        sorted = false;\r\n      }\r\n    }\r\n    indicesSorted.add(j);\r\n    if(sorted) {\r\n      for(let k = 0; k < j; k++) {\r\n        indicesSorted.add(k);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  indicesSorted.add(0);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* CocktailShakerSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  let lower = 0;\r\n  let upper = length - 1;\r\n  let swapped = false;\r\n\r\n  do {\r\n    swapped = false;\r\n    for(let i = lower; i < upper; i++) {\r\n      yield [i, i+1];\r\n      if(array.gt(i, i+1)) {\r\n        array.swap(i, i+1);\r\n        swapped = true;\r\n      }\r\n    }\r\n    indicesSorted.add(upper);\r\n    upper = upper - 1;\r\n\r\n    // if(!swapped) {\r\n    //   break;\r\n    // }\r\n\r\n    swapped = false;\r\n    for(let i = upper; i > lower; i--) {\r\n      yield [i-1, i];\r\n      if(array.gt(i-1, i)) {\r\n        array.swap(i-1, i);\r\n        swapped = true;\r\n      }\r\n    }\r\n    indicesSorted.add(lower);\r\n    lower = lower + 1;\r\n  } while(swapped)\r\n\r\n  for(let i = lower; i <= upper; i++) {\r\n    indicesSorted.add(i);\r\n  }\r\n\r\n  yield [undefined, undefined];\r\n\r\n  return\r\n}\r\n\r\nfunction* SelectionSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let i = 0; i < length; i++) {\r\n    let best = i;\r\n    for(let j = i + 1; j < length; j++) {\r\n      yield [best, j];\r\n      if(array.gt(best, j)) {\r\n        best = j;\r\n      }\r\n    }\r\n\r\n    if(best !== i) {\r\n      array.swap(i, best);\r\n    }\r\n    indicesSorted.add(i);\r\n  }\r\n  yield [undefined, undefined];\r\n\r\n  return\r\n}\r\n\r\nfunction* InsertionSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  indicesSorted.add(0);\r\n\r\n  for(let i = 1; i < length; i++) {\r\n    indicesSorted.add(i);\r\n    for(let j = i - 1; j >= 0; j--) {\r\n      yield [j, j+1];\r\n      if(array.gt(j, j+1)) {\r\n        array.swap(j, j+1);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* QuickSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  function* qs(lo: number, hi: number): SorterAlgorithmGenerator {\r\n    if(lo < hi)\r\n    {\r\n      let mid = Math.floor((lo + hi)/2);\r\n      let i = lo - 1;\r\n      let j = hi + 1;\r\n      while(true) {\r\n        do {\r\n          i = i + 1;\r\n          yield [i, mid];\r\n        } while(array.lt(i, mid))\r\n        do {\r\n          j = j - 1;\r\n          yield [mid, j];\r\n        } while(array.gt(j, mid))\r\n        if(i >= j) {\r\n          break\r\n        }\r\n        array.swap(i, j);\r\n        if(mid === i) {\r\n          mid = j\r\n        } else if(mid === j) {\r\n          mid = i\r\n        }\r\n      }\r\n    \r\n      yield* qs(lo, j);\r\n      yield* qs(j+1, hi);\r\n    } else {\r\n      indicesSorted.add(lo);\r\n    }\r\n  }\r\n\r\n  yield* qs(0, length-1);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* HeapSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  function* shiftDown(start: number, end: number): SorterAlgorithmGenerator {\r\n    let root = start;\r\n    let child;\r\n\r\n    while((child = 2 * root + 1) <= end) {\r\n      let swap = root;\r\n      yield [swap, child];\r\n      if(array.lt(swap, child)) {\r\n        swap = child;\r\n      }\r\n      yield [swap, child+1];\r\n      if(child+1 <= end && array.lt(swap, child + 1)) {\r\n        swap = child + 1;\r\n      }\r\n      if(swap === root) {\r\n        return;\r\n      } else {\r\n        array.swap(root, swap);\r\n        root = swap;\r\n      }\r\n    }\r\n  }\r\n  function* heapify() {\r\n    for(let start = Math.floor((length-2) / 2); start >= 0; start--) {\r\n      yield* shiftDown(start, length - 1);\r\n    }\r\n  }\r\n\r\n  yield* heapify();\r\n\r\n  for(let end = length - 1; end > 0; end--) {\r\n    array.swap(end, 0);\r\n    indicesSorted.add(end);\r\n    yield* shiftDown(0, end-1);\r\n  }\r\n\r\n  indicesSorted.add(0);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* ShellSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n  const gaps = [701, 301, 132, 57, 23, 10, 4, 1]\r\n\r\n  if(length <= 0) return;\r\n\r\n  for(let gap of gaps) {\r\n    for(let i = gap; i < length; i++) {\r\n      for(let j = i; j >= gap; j -= gap) {\r\n        yield [j - gap, j];\r\n        if(array.gt(j - gap, j)) {\r\n          array.swap(j - gap, j);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      if(gap === 1) {\r\n        indicesSorted.add(i-1);\r\n      }\r\n    }\r\n  }\r\n\r\n  indicesSorted.add(length-1);\r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nfunction* CombSort(array: SorterArray, indicesSorted: Set<number>): SorterAlgorithmGenerator {\r\n  const length = array.length;\r\n\r\n  if(length <= 0) return;\r\n\r\n  let gap = length;\r\n  const shrink = 1.3;\r\n  let isSorted = false;\r\n\r\n  while(isSorted === false) {\r\n    gap = Math.floor(gap / shrink);\r\n\r\n    if(gap <= 1) {\r\n      gap = 1;\r\n      isSorted = true;\r\n    }\r\n\r\n    for(let i = 0; i + gap < length; i++) {\r\n      yield [i, i + gap];\r\n      if(array.gt(i, i + gap)) {\r\n        array.swap(i, i + gap);\r\n        isSorted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for(let i = 0; i < length; i++) {indicesSorted.add(i)}\r\n  \r\n  yield [undefined, undefined];\r\n\r\n  return;\r\n}\r\n\r\nexport const algorithms = {\r\n  BubbleSort,\r\n  CocktailShakerSort,\r\n  SelectionSort,\r\n  InsertionSort,\r\n  QuickSort,\r\n  HeapSort,\r\n  ShellSort,\r\n  CombSort,\r\n}\r\n\r\nexport type AlgorithmName = keyof typeof algorithms;\r\n\r\nexport const algorithmNames = Object.keys(algorithms) as AlgorithmName[];","import { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\nimport { AlgorithmName, algorithms } from \"../Sorter/SorterAlgorithms\";\r\n\r\ntype AlgorithmSelectionProps = {\r\n  algorithm: AlgorithmName\r\n  onChange?: (algorithm: AlgorithmName) => void\r\n  disabled?: boolean,\r\n}\r\n\r\nconst algorithmNameList = Object.keys(algorithms);\r\n\r\nexport function AlgorithmSelection({algorithm, onChange, disabled=false}: AlgorithmSelectionProps) {\r\n\r\n  return (\r\n    <LabeledSelect text=\"Algorithm\" value={algorithm} disabled={disabled} onChange={(event) => {\r\n      const value = event.target.value;\r\n\r\n      if(algorithmNameList.includes(value) && onChange) {\r\n        onChange(value as AlgorithmName);\r\n      }\r\n    }}>\r\n      {algorithmNameList.map(name => <option key={name} value={name}>{name}</option>)}\r\n    </LabeledSelect>\r\n  );\r\n}","import { useEffect } from \"react\";\r\nimport { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype DataPresetSelectionProps = {\r\n  count: number;\r\n  preset?: DataPreset;\r\n  onPresetChange?: (preset: DataPreset) => void;\r\n  onDataChange?: (data: number[]) => void;\r\n};\r\n\r\nexport type DataPreset = keyof typeof dataGenerators;\r\n\r\nfunction shuffleFisherYates(array: Array<number>) {\r\n  let i = array.length;\r\n  while (i--) {\r\n    const ri = Math.floor(Math.random() * i);\r\n    [array[i], array[ri]] = [array[ri], array[i]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction sortedData(count: number) {\r\n  const result: number[] = [];\r\n\r\n  for(let i=0; i<count; i++) {\r\n    result[i] = 1/count * (i+1);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction reverseSortedData(count: number) {\r\n  return sortedData(count).reverse();\r\n}\r\n\r\nfunction shuffledData(count: number) {\r\n  return shuffleFisherYates(sortedData(count));\r\n}\r\n\r\nfunction fewUniqueData(count: number, uniques: number = 16) {\r\n  const result: number[] = [];\r\n\r\n  for(let i = 1; i <= uniques; i++) {\r\n    while (result.length < count/uniques * i) {\r\n      result.push(i/uniques);\r\n    }\r\n  }\r\n\r\n  return shuffleFisherYates(result);\r\n}\r\n\r\nconst dataGenerators = {\r\n  shuffled: shuffledData,\r\n  sorted: sortedData,\r\n  reverseSorted: reverseSortedData,\r\n  fewUnique: fewUniqueData,\r\n}\r\n\r\nexport const dataPresets = Object.keys(dataGenerators) as DataPreset[];\r\n\r\nexport function DataPresetSelection({count, preset='shuffled', onPresetChange, onDataChange}: DataPresetSelectionProps) {\r\n  useEffect(() => {\r\n    if(onDataChange) onDataChange(dataGenerators[preset](count));\r\n  }, [preset, count, onDataChange]);\r\n\r\n  return (\r\n    <LabeledSelect text=\"Data Preset\" value={preset} onChange={(event) => {\r\n      if(onPresetChange) {\r\n        const preset = event.target.value as DataPreset;\r\n        onPresetChange(preset);\r\n      }\r\n    }}>\r\n      <option value=\"shuffled\">Shuffled</option>\r\n      <option value=\"sorted\">Sorted</option>\r\n      <option value=\"reverseSorted\">Reverse Sorted</option>\r\n      <option value=\"fewUnique\">Few Unique</option>\r\n    </LabeledSelect>\r\n  );\r\n}","import { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype SleepTimeSelectionProps = {\r\n  sleepTime: number\r\n  options: number[];\r\n  onChange?: (sleepTime: number) => void;\r\n};\r\n\r\nexport function SleepTimeSelection({sleepTime, options, onChange}: SleepTimeSelectionProps) {\r\n  return(\r\n    <LabeledSelect text=\"Sleep Time\" value={sleepTime} onChange={(event) => {\r\n      const value = parseFloat(event.target.value);\r\n\r\n      if(onChange && !isNaN(value)) {\r\n        onChange(value);\r\n      }\r\n    }}>\r\n      {options.map(value => <option key={value} value={value}>{value}ms</option>)}\r\n    </LabeledSelect>\r\n  );\r\n}","import styles from './Canvas.module.scss';\r\nimport { useEffect } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\r\n\r\ntype CanvasProps = {\r\n  draw: (ctx: CanvasRenderingContext2D, frameTime: number, avgFrameTime: number, frameCount: number) => void;\r\n  redraw?: () => boolean;\r\n}\r\n\r\nexport function Canvas ({draw, redraw=()=>true}: CanvasProps) {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n  const frameTime = useRef(1000);\r\n  const frameCount = useRef(0);\r\n  const lastFrameTime = useRef(0);\r\n\r\n  const wrapperDimensions = useResizeObserver(wrapperRef);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    if(canvas) {\r\n      canvas.width = wrapperDimensions?.width || 0\r\n      canvas.height = wrapperDimensions?.height || 0;\r\n\r\n      const context = canvas.getContext('2d');\r\n      if(context) draw(context, frameTime.current, frameTime.current, frameCount.current);\r\n    }\r\n  }, [wrapperDimensions, draw]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas?.getContext('2d');\r\n    if(!context) return;\r\n\r\n    let t0 = performance.now();\r\n\r\n    let animationFrameId: number;\r\n\r\n    const render = () => {\r\n      if(redraw()) {\r\n        frameCount.current++;\r\n        const t1 = performance.now()\r\n        lastFrameTime.current = t1 - t0;\r\n        draw(context, lastFrameTime.current, frameTime.current, frameCount.current);\r\n        t0 = t1;\r\n      }\r\n\r\n      frameTime.current += (lastFrameTime.current - frameTime.current) / 20;\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    }\r\n    render();\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    }\r\n  }, [redraw, draw]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} className={styles.canvasWrapper}>\r\n      <canvas ref={canvasRef} className={styles.canvas} />\r\n    </div>\r\n  );\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport const useResizeObserver = (ref: { current: any }) => {\r\n  const [dimensions, setDimensions] = useState<DOMRectReadOnly>();\r\n  useEffect(() => {\r\n      const observeTarget = ref.current;\r\n      const resizeObserver = new ResizeObserver((entries) => {\r\n          entries.forEach((entry) => {\r\n              setDimensions(entry.contentRect);\r\n          });\r\n      });\r\n      resizeObserver.observe(observeTarget);\r\n      return () => {\r\n          resizeObserver.unobserve(observeTarget);\r\n      };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n","\r\nfunction cloneArray<T>(array: Array<T>) {\r\n  const result = [];\r\n  let i = array.length;\r\n  while(i--) {\r\n    result[i] = array[i];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class SorterArray {\r\n  private array: number[];\r\n  private compareFn: (a: number, b: number) => number;\r\n  private _accesses: number = 0;\r\n  private _comparisons: number = 0;\r\n\r\n  constructor(array: number[], compareFn: (a: number, b: number) => number) {\r\n    this.array = cloneArray(array);\r\n    this.compareFn = compareFn;\r\n  }\r\n\r\n  get length() {\r\n    return this.array.length;\r\n  }\r\n\r\n  private validateIndex(i: number) {\r\n    if(i >= this.array.length || i < 0) throw new RangeError('index out of range');\r\n  }\r\n\r\n  value(i: number) {\r\n    this.validateIndex(i);  \r\n\r\n    return this.array[i];\r\n  }\r\n\r\n  get(i: number) {\r\n    this.validateIndex(i);  \r\n\r\n    this._accesses = this._accesses + 1;\r\n    return this.array[i];\r\n  }\r\n\r\n  private set(i: number, v: number) {\r\n    this.validateIndex(i);    \r\n\r\n    this._accesses = this._accesses + 1\r\n    this.array[i] = v;\r\n  }\r\n\r\n  private compare(i: number, j: number) {\r\n    this._comparisons = this._comparisons + 1;\r\n    return this.compareFn(this.get(i), this.get(j));\r\n  }\r\n\r\n  lt(i: number, j: number) {\r\n    return this.compare(i, j) < 0;\r\n  }\r\n\r\n  gt(i: number, j: number) {\r\n    return this.compare(i, j) > 0;\r\n  }\r\n\r\n  lte(i: number, j: number) {\r\n    return this.compare(i, j) <= 0;\r\n  }\r\n\r\n  gte(i: number, j: number) {\r\n    return this.compare(i, j) >= 0;\r\n  }\r\n\r\n  eq(i: number, j: number) {\r\n    return this.compare(i, j) === 0;\r\n  }\r\n\r\n  swap(i: number, j: number) {\r\n    const temp = this.get(i);\r\n\r\n    this.set(i, this.get(j));\r\n    this.set(j, temp);\r\n  }\r\n\r\n  get accesses() {\r\n    return this._accesses;\r\n  }\r\n\r\n  get comparisons() {\r\n    return this._comparisons;\r\n  }\r\n\r\n  get values() {\r\n    return cloneArray(this.array);\r\n  }\r\n}","import { AlgorithmName, algorithms, SorterAlgorithmGenerator } from \"./SorterAlgorithms\";\r\nimport { SorterArray } from \"./SorterArray\";\r\n\r\n\r\nexport class SorterLogic {\r\n  static readonly compareFn = (i: number, j: number) => i - j;\r\n  static readonly minDelay = 10;\r\n\r\n\r\n  private trueDelay: number = SorterLogic.minDelay;\r\n  private delay: number = this.trueDelay;\r\n\r\n  private generator: SorterAlgorithmGenerator;\r\n  private values: SorterArray;\r\n  private indidcesSorted = new Set<number>();\r\n  private lastCompared: [number | undefined, number | undefined] = [undefined, undefined];\r\n\r\n  private step = 0;\r\n  private tStart = 0;\r\n\r\n  private sleepTime = 0;\r\n  private realTime = 0;\r\n\r\n  private timeout = 0;\r\n  private running = false;\r\n\r\n  private updated = true;\r\n  private finished = false;\r\n\r\n  private onFinished: (() => void) | undefined;\r\n\r\n  constructor(data: number[], algorithm: AlgorithmName, delay: number, onFinished?: () => void) {\r\n    this.values = new SorterArray(data, SorterLogic.compareFn);\r\n    this.generator = algorithms[algorithm](this.values, this.indidcesSorted);\r\n    this.onFinished = onFinished;\r\n\r\n    this.setDelay(delay);\r\n\r\n    this.loop = this.loop.bind(this);\r\n  }\r\n\r\n  runNext() {\r\n    const next = this.generator.next();\r\n\r\n    if(!next.done){\r\n      const [i, j] = next.value;\r\n\r\n      this.lastCompared = [i, j];\r\n    } else {\r\n      this.lastCompared = [undefined, undefined];\r\n    }\r\n\r\n    this.updated = true;\r\n\r\n    return !next.done;\r\n  }\r\n\r\n  private loop() {\r\n    const t0 = performance.now();\r\n\r\n    this.sleepTime = this.sleepTime + this.trueDelay;\r\n\r\n    let hasNext;\r\n    do {\r\n      hasNext = this.runNext();\r\n      this.step = this.step + 1;\r\n    } while(hasNext && t0 - this.tStart > this.delay * this.step)\r\n\r\n    if(!hasNext) {\r\n      this.pause();\r\n      this.finished = true;\r\n      if(this.onFinished) this.onFinished();\r\n    }\r\n\r\n    this.realTime = this.realTime + performance.now() - t0; \r\n  }\r\n\r\n  start() {\r\n    if(!this.finished && !this.running)\r\n    {\r\n      this.timeout = window.setInterval(this.loop, this.trueDelay);\r\n      this.running = true;\r\n      this.tStart = performance.now();\r\n      this.step = 0;\r\n    }\r\n  }\r\n\r\n  pause() {\r\n    if(this.running) {\r\n      clearInterval(this.timeout);\r\n      this.running = false;\r\n    }\r\n  }\r\n\r\n  didUpdate() {\r\n    return this.updated;\r\n  }\r\n\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  isFinished() {\r\n    return this.finished;\r\n  }\r\n\r\n  getSleepTime() {\r\n    return this.sleepTime;\r\n  }\r\n\r\n  getRealTime() {\r\n    return this.realTime;\r\n  }\r\n\r\n  getLastCompared() {\r\n    return this.lastCompared;\r\n  }\r\n\r\n  getIndicesSorted() {\r\n    return this.indidcesSorted;\r\n  }\r\n\r\n  getValues() {\r\n    return this.values.values;\r\n  }\r\n\r\n  getDelay() {\r\n    return this.delay;\r\n  }\r\n\r\n  getTrueDelay() {\r\n    return this.trueDelay;\r\n  }\r\n\r\n  getComparisons() {\r\n    return this.values.comparisons;\r\n  }\r\n\r\n  getAccesses() {\r\n    return this.values.accesses;\r\n  }\r\n\r\n  getLastState() {\r\n    this.updated = false;\r\n\r\n    return {\r\n      values: this.getValues(),\r\n      indicesSorted: this.getIndicesSorted(),\r\n      lastCompared: this.getLastCompared(),\r\n      comparisons: this.getComparisons(),\r\n      accesses: this.getAccesses(),\r\n    };\r\n  }\r\n\r\n  setDelay(delay: number) {\r\n    this.delay = Math.max(delay, 0);\r\n    this.trueDelay = Math.max(SorterLogic.minDelay, this.delay);\r\n\r\n    if(this.running) {\r\n      this.pause();\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  setOnFinished(callback: (() => void) | undefined) {\r\n    this.onFinished = callback;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { Canvas } from \"../Canvas/Canvas\";\r\nimport { AlgorithmName } from \"./SorterAlgorithms\";\r\nimport { SorterLogic } from \"./SorterLogic\";\r\nimport styles from './Sorter.module.scss';\r\n\r\ntype SorterProps = {\r\n  data: number[];\r\n  algorithm: AlgorithmName;\r\n  sleepTime: number,\r\n  border: number;\r\n  defaultColor: string;\r\n  comparedColor: string;\r\n  sortedColor: string;\r\n  onFinished?: () => void;\r\n  onMaxValuesChange?: (maxValues: number) => void;\r\n};\r\n\r\ntype SorterState = {\r\n  logic: SorterLogic;\r\n};\r\n\r\nexport class Sorter extends Component<SorterProps, SorterState> {\r\n  static defaultProps = { \r\n    algorithm: 'BubbleSort', \r\n    sleepTime: 100, \r\n    border: 1,\r\n    defaultColor: 'lightblue',\r\n    comparedColor: 'red',\r\n    sortedColor: 'green',\r\n  };\r\n\r\n  private maxValues = 0;\r\n\r\n  constructor(props: SorterProps) {\r\n    super(props);\r\n\r\n    this.redraw = this.redraw.bind(this);\r\n    this.draw= this.draw.bind(this);\r\n    this.onFinished = this.onFinished.bind(this);\r\n\r\n    const logic = new SorterLogic(props.data, props.algorithm, props.sleepTime, this.onFinished)\r\n\r\n    this.state = {\r\n      logic: logic,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: SorterProps, prevState: SorterState) {\r\n    const { data, algorithm, sleepTime } = this.props;\r\n    const { logic } = this.state;\r\n\r\n    if (prevState.logic !== logic) {\r\n      prevState.logic.pause();\r\n    }\r\n\r\n    if (prevProps.data !== data || prevProps.algorithm !== algorithm) {\r\n      this.reset();\r\n    }\r\n\r\n    if (prevProps.sleepTime !== sleepTime) {\r\n      logic.setDelay(sleepTime);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pause();\r\n  }\r\n\r\n  start() {\r\n    this.state.logic.start();\r\n  }\r\n\r\n  pause() {\r\n    this.state.logic.pause();\r\n  }\r\n\r\n  onFinished() {\r\n    const { onFinished } = this.props;\r\n\r\n    this.pause();\r\n    if(onFinished) onFinished();\r\n  }\r\n\r\n  reset() {\r\n    const { data, algorithm, sleepTime } = this.props;\r\n\r\n    const logic = new SorterLogic(data, algorithm, sleepTime, this.onFinished);\r\n\r\n    this.setState({\r\n      logic: logic,\r\n    });\r\n  }\r\n\r\n  isRunning() {\r\n    return this.state.logic.isRunning();\r\n  }\r\n\r\n  isFinished() {\r\n    return this.state.logic.isFinished();\r\n  }\r\n\r\n  private setMaxValues(maxValues: number) {\r\n    const { onMaxValuesChange } = this.props;\r\n\r\n    if(onMaxValuesChange && maxValues !== this.maxValues) {\r\n      onMaxValuesChange(maxValues);\r\n    }\r\n    this.maxValues = maxValues;\r\n  }\r\n\r\n  private redraw() {\r\n    return this.state.logic.didUpdate();\r\n  }\r\n\r\n  private draw (ctx: CanvasRenderingContext2D, frameTime:number, avgFrameTime: number) {\r\n    const {\r\n      border,\r\n      defaultColor,\r\n      sortedColor,\r\n      comparedColor,\r\n    } = this.props;\r\n\r\n    const { logic } = this.state;\r\n\r\n    if(logic) {\r\n      const width = ctx.canvas.width;\r\n      const height = ctx.canvas.height;\r\n      const borderWidth = Math.ceil(Math.max(width, height) / 100 * border * 0.5)\r\n      const innerWidth = width - 2 * borderWidth;\r\n      const innerHeight = height - 2 * borderWidth;\r\n\r\n      this.setMaxValues(innerWidth);\r\n\r\n      ctx.clearRect(0, 0, width, height);\r\n\r\n      const {values, lastCompared, indicesSorted, comparisons, accesses} = logic.getLastState();\r\n\r\n      const elementWidth = Math.floor(innerWidth / values.length);\r\n      const offset = (width - elementWidth * values.length) / 2;\r\n\r\n      ctx.fillStyle = 'white';\r\n      ctx.fillRect(offset - borderWidth * 0.5, borderWidth * 0.5, (width - 2 * offset + borderWidth), innerHeight + borderWidth);\r\n\r\n      values.forEach((value, i) => {\r\n        let color = defaultColor;\r\n\r\n        if(indicesSorted.has(i)) color = sortedColor;\r\n        if(lastCompared.includes(i)) color = comparedColor;\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(offset + elementWidth * i, innerHeight + borderWidth - innerHeight*value, elementWidth*1.05, innerHeight*value)\r\n      });\r\n\r\n      if(borderWidth > 0)\r\n      {\r\n        ctx.lineWidth = borderWidth;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.strokeRect(offset - borderWidth * 0.5, borderWidth * 0.5, (width - 2 * offset + borderWidth), innerHeight + borderWidth);\r\n      }\r\n\r\n      const fontSize = innerHeight / 20;\r\n      const textX = offset + borderWidth\r\n      const textY = borderWidth;\r\n      ctx.font = `${fontSize}px sans-serif`;\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillText(`Comparisons: ${comparisons}`,textX, textY  + fontSize);\r\n      ctx.fillText(`Array Accesses: ${accesses}`, textX, textY  + fontSize * 2);\r\n      ctx.fillText(`Real Time: ${logic.getRealTime().toFixed(1)}ms`, textX, textY + fontSize * 3);\r\n      ctx.fillText(`Sleep Time: ${(logic.getSleepTime()/1000).toFixed(1)}s`, textX, textY + fontSize * 4);\r\n\r\n      if(logic.isRunning()) {\r\n        ctx.fillText(`fps: ${(1000/avgFrameTime).toFixed(0)}`, textX, textY + fontSize * 5);\r\n      } else {\r\n        ctx.fillText('fps: -', textX, textY + fontSize * 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.sorter}>\r\n        <Canvas draw={this.draw} redraw={this.redraw} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useEffect, useMemo } from \"react\";\r\nimport { LabeledSelect } from \"../LabeledSelect/LabeledSelect\";\r\n\r\ntype ValueCountSelectionProps = {\r\n  valueCount: number,\r\n  maxValue: number,\r\n  onChange?: (valueCount: number) => void;\r\n};\r\n\r\nexport function ValueCountSelection({valueCount, maxValue, onChange}: ValueCountSelectionProps) {\r\n  const values: number[] = useMemo(() => {\r\n    const result = [];\r\n\r\n    for(let i = 16; i < maxValue; i *= 2) {\r\n      result.push(i);\r\n    }\r\n    result.push(maxValue);\r\n\r\n    return result;\r\n  }, [maxValue]);\r\n\r\n  useEffect(() => {\r\n    if(!onChange) return;\r\n    \r\n    if(valueCount > maxValue) onChange(maxValue);\r\n    else if(valueCount < maxValue && !values.includes(valueCount)) {\r\n      for(let i = 0; i < values.length; i++) {\r\n        if(values[i] > valueCount) {\r\n          onChange(values[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }, [valueCount, maxValue, onChange, values]);\r\n\r\n  return (\r\n    <LabeledSelect text=\"Values\" value={valueCount} onChange={(event) => {\r\n      const value = parseInt(event.target.value);\r\n\r\n      if(!isNaN(value) && onChange) {\r\n        onChange(value);\r\n      }\r\n    }}>\r\n      {values.map(value => <option key={value} value={value}>{value}</option>)}\r\n    </LabeledSelect>\r\n  );\r\n}","import { useRef, useState } from 'react';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport { AlgorithmSelection } from '../AlgorithmSelection/AlgorithmSelection';\r\nimport { DataPreset, DataPresetSelection } from '../DataPresetSelection/DataPresetSelection';\r\nimport { SleepTimeSelection } from '../SleepTimeSelection/SleepTimeSelection';\r\nimport { Sorter } from '../Sorter/Sorter';\r\nimport { AlgorithmName } from '../Sorter/SorterAlgorithms';\r\nimport { ValueCountSelection } from '../ValueCountSelection/ValueCountSelection';\r\nimport styles from './SortingApp.module.scss';\r\n\r\nexport function SortingApp() {\r\n  const [preset, setPreset] = useState<DataPreset>('shuffled');\r\n  const [data, setData] = useState<Array<number>>([]);\r\n  const [valueCount, setValueCount] = useState(16);\r\n  const [sleepTime, setSleepTime] = useState(500);\r\n  const [maxValues, setMaxValues] = useState(valueCount);\r\n  const [algorithm, setAlgorithm] = useState<AlgorithmName>('BubbleSort');\r\n\r\n  const [enableStart, setEnableStart] = useState(true);\r\n  const [enablePause, setEnablePause] = useState(false);\r\n\r\n  const sorterRef = useRef<Sorter>(null);\r\n\r\n  return (\r\n    <div className={styles.appContainer}>\r\n      <Navbar collapseOnSelect expand=\"xl\" className=\"navbar-dark bg-secondary\">\r\n        <Container fluid>\r\n          <Navbar.Toggle />\r\n          <Navbar.Brand>SAV</Navbar.Brand>\r\n          <Navbar.Collapse>\r\n            <Nav className=\"w-100 justify-content-center\">\r\n              <Nav.Item>\r\n                <DataPresetSelection preset={preset} onPresetChange={setPreset} onDataChange={setData} count={valueCount} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <ValueCountSelection valueCount={valueCount} maxValue={maxValues} onChange={setValueCount} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <SleepTimeSelection sleepTime={sleepTime} onChange={setSleepTime} options={[500, 250, 100, 50, 25, 10, 5, 1]} />\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <AlgorithmSelection algorithm={algorithm} onChange={setAlgorithm} />\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <Container fluid className={styles.sorterContainer}>\r\n        <Sorter \r\n            ref={sorterRef} \r\n            data={data} \r\n            algorithm={algorithm} \r\n            sleepTime={sleepTime} \r\n            onMaxValuesChange={setMaxValues} \r\n            onFinished={() => {\r\n              setEnableStart(false);\r\n              setEnablePause(false);\r\n            }}\r\n        />\r\n      </Container>\r\n\r\n      <Nav className={`navbar-dark bg-secondary py-2 ${styles.footer}`}>\r\n          <button\r\n            id=\"btn-start\"\r\n            className=\"btn btn-success\"\r\n            onClick={()=>{\r\n              sorterRef.current?.start()\r\n              setEnableStart(false);\r\n              setEnablePause(true);\r\n            }}\r\n            disabled={!enableStart}\r\n          ><span className=\"bi bi-play-fill\" />Start</button>\r\n\r\n          <button \r\n            id=\"btn-pause\"\r\n            className=\"btn btn-primary\" \r\n            onClick={()=>{\r\n              sorterRef.current?.pause()\r\n              setEnableStart(true);\r\n              setEnablePause(false);\r\n            }}\r\n            disabled={!enablePause}\r\n          ><span className=\"bi bi-pause-fill\" />Pause</button>\r\n\r\n          <button \r\n            id=\"btn-reset\"\r\n            className=\"btn btn-danger\"\r\n            onClick={()=>{\r\n              sorterRef.current?.reset()\r\n              setEnableStart(true);\r\n              setEnablePause(false);\r\n            }}\r\n          ><span className=\"bi bi-arrow-counterclockwise\" />Reset</button>\r\n      </Nav>\r\n    </div>\r\n  );\r\n}","import { SortingApp } from './components/SortingApp/SortingApp';\n\nfunction App() {\n  return (\n    <SortingApp />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}